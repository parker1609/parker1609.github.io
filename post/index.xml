<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Parker Blog</title>
    <link>https://parker1609.github.io/post/</link>
    <description>Recent content in Posts on Parker Blog</description>
    <image>
      <title>Parker Blog</title>
      <url>https://parker1609.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://parker1609.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Aug 2023 10:33:30 +0900</lastBuildDate><atom:link href="https://parker1609.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2023년 전세집 이사</title>
      <link>https://parker1609.github.io/post/daily/2023-a-move/</link>
      <pubDate>Sun, 20 Aug 2023 10:33:30 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/daily/2023-a-move/</guid>
      <description>서울로 독립을 하면서 3년간 낙성대역 근처 3평 남짓한 원룸에서 지냈다. 원래는 2년을 지내고 이사를 가려고 했었다. 그런데 몇 가지 문제로 1년 더 연장을 해서 총 3년을 지내게 되었다.
Part 1. 2022년 이사 실패 2022년 여름 낙성대역 원룸 2년 계약이 끝나가고 있었다. 나는 다음 이사할 곳으로 전세 원룸 오피스텔을 알아보고 있었고, 이 당시 회사는 풀재택을 하고 있어서 위치는 크게 중요하지 않았다. 그래서 여러 후보 지역이 있었다. 미사역, 거여역, 모란역, 상현역, &amp;hellip; 등 신도시거나 원룸 오피스텔이 모여있는 깨끗한 동네 그리고 산책할 곳이 있는 곳 위주로 찾아보았다.</description>
    </item>
    
    <item>
      <title>Spring Boot에서 카프카 사용하기</title>
      <link>https://parker1609.github.io/post/spring-boot-kafka/</link>
      <pubDate>Mon, 29 May 2023 10:27:57 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/spring-boot-kafka/</guid>
      <description>이 글의 코드는 해당 링크에서 확인할 수 있습니다.
목표 Spring Boot 에서 Apache Kafka 사용 방법
자주 사용하는 설정 정리
테스트 개발 환경 Spring Boot 3.1.0
Java 17
Spring Kafka 3.0.7
kafka-client 3.4.0 Gradle
Docker
Broker 테스트 개발 환경에서는 카프카를 로컬에서 Docker 파일로 띄우고, Spring 서버에서 이를 연결한다.
로컬에서 Docker로 Apache Kafka 실행하기 kafka docker image 비교 bitnami
confluentinc
wurstmeister
링크 다운로드 수 star 수 특징 confluentinc Kafka / Zookeeper 100M+ 394 confluent 에서 제공하는 기능이 포함 bitnami Kafka / Zookeeper 100M+ 669 순수 카프카 이미지 wurstmeister Kafka / Zookeeper 100M+ 1.</description>
    </item>
    
    <item>
      <title>대화형 AI 사용 후기와 그 미래... (feat. ChatGPT, Google Bard)</title>
      <link>https://parker1609.github.io/post/review-of-conversational-ai/</link>
      <pubDate>Sun, 21 May 2023 09:44:21 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/review-of-conversational-ai/</guid>
      <description>요즘 개발을 넘어 세계적으로 가장 핫한 키워드는 &amp;lsquo;ChatGPT&amp;rsquo;일 것이다. 이는 간단히 말하면 챗봇과 같은 AI인데, 대화형 AI, 챗봇 AI, 대규모 언어 모델(LLM) AI 등으로 불리우고 있다. 이를 직접 사용해본 경험과 그 미래에 대해서 내 개인적인 의견을 적어보려한다.
현재 시점(2023년 5월 21) 기준으로 ChatGPT는 2달간 결제해서 사용해보고 있고, Google Bard는 약 1~2주 정도 간단히 사용해보고 있다. Bard는 간략하게 ChatGPT와의 차이점에 대해서 정도 적어볼 예정이다.
ChatGPT ChatGPT에 대한 설명은 이를 직접 chatGPT에 물어본 내용을 약간 정리만 해보았다.</description>
    </item>
    
    <item>
      <title>[Kafka] 101 - 카프카에 대한 소개와 주요 설정</title>
      <link>https://parker1609.github.io/post/kafka-101/</link>
      <pubDate>Sun, 07 May 2023 12:39:08 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/kafka-101/</guid>
      <description>카프카(Apache Kafka)란? Apache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.
카프카는 대용량의 실시간 데이터 스트리밍 플랫폼으로서, 분산형 메시지 큐 시스템으로 동작한다. 카프카는 다음과 같은 특징을 가지고 있다.
높은 처리량과 낮은 지연시간 페이지 캐시 배치 전송 처리 (프로듀서 및 컨슈머는 단 건이 아닌 여러 개로 처리 가능) 압축 전송 (네트워크 통신 효율) 배치와 같이 사용하면 효과가 더욱 커진다.</description>
    </item>
    
    <item>
      <title>자바 웹 기술 역사</title>
      <link>https://parker1609.github.io/post/java-web-history/</link>
      <pubDate>Sun, 26 Feb 2023 14:45:58 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/java-web-history/</guid>
      <description>1. CGI (Common Gateway Interface) World Wide Web(WWW)은 초기에는 데이터가 동적으로 변하는 것에 대한 생각은 하지 않아 정적인 페이지 위주로 개발이 되었다. 시간이 흘러 웹은 점점 더 많은 데이터를 보여주도록 변하였고, 사용자가 필요에 따라 바로바로 데이터를 보여주는 동적인 페이지에 대한 수요가 늘었다. 동적인 페이지의 예제는 요즘은 흔히 찾아볼 수 있다. 웹 화면 사이드에 여러 광고가 보인다거나, 게시글이 보여지고 내가 보고 싶은 게시글을 검색한다거나, 댓글을 다는 등의 행동은 모두 동적인 페이지에서 이루어진다.</description>
    </item>
    
    <item>
      <title>Java 11 vs Java 17</title>
      <link>https://parker1609.github.io/post/java-11-vs-java-17/</link>
      <pubDate>Fri, 24 Feb 2023 11:53:53 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/java-11-vs-java-17/</guid>
      <description>1. 지원기간 https://www.oracle.com/java/technologies/java-se-support-roadmap.html
자바 11버전은 최대 2026년 9월까지 지원 자바 17버전은 최대 2029년 9월까지 지원 2. Java 11 VS 17, 주요 변경사항 아래 예제 코드의 전체는 https://github.com/programming-starter/java-17-starter 이 링크에서 확인할 수 있습니다.
Text Blocks 문자열을 좀 더 읽기 좋게 표현할 수 있게 되었다. 특히 JSON과 같은 문자열을 표현할 때, 예전에는 다음과 같이 표현해야 했다.
{ &amp;#34;name&amp;#34;: &amp;#34;parker&amp;#34;, &amp;#34;age&amp;#34;: 30, &amp;#34;job&amp;#34;: &amp;#34;Programmer&amp;#34; } @Test void old_style() { var json = &amp;#34;{\n&amp;#34; + &amp;#34; \&amp;#34;name\&amp;#34;: \&amp;#34;parker\&amp;#34;,\n&amp;#34; + &amp;#34; \&amp;#34;age\&amp;#34;: 30,\n&amp;#34; + &amp;#34; \&amp;#34;job\&amp;#34;: \&amp;#34;Programmer\&amp;#34;\n&amp;#34; + &amp;#34;}&amp;#34;; System.</description>
    </item>
    
    <item>
      <title>Hugo 블로그 생성 과정 (theme PaperMod)</title>
      <link>https://parker1609.github.io/post/creating-my-blog-with-hugo/</link>
      <pubDate>Sun, 19 Feb 2023 15:09:26 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/creating-my-blog-with-hugo/</guid>
      <description>1. Hugo 설치 및 블로그 테마 설정 Mac OS 기준
1.1. Hugo 설치하기 # Hugo 설치 brew install hugo # hugo 버전 확인 hugo version &amp;gt; hugo v0.104.3+extended darwin/amd64 BuildDate=unknown 1.2. Hugo 블로그 만들기 &amp;amp; PaperMod 테마 설치하기 Hugo 블로그 역시 여러가지 테마를 가지고 있고, 이는 이 링크에서 확인할 수 있다. 그 중 PaperMod 테마가 깔끔하고 마음에 들어 선택하였다. 테마마다 블로그 설정이 조금씩 달라질 수 있으므로, 테마의 레퍼런스도 꼼꼼히 확인해보기를 추천한다.</description>
    </item>
    
    <item>
      <title>동적 프록시(Dynamic Proxy) with Spring Framework</title>
      <link>https://parker1609.github.io/post/dynamic-proxy-with-spring/</link>
      <pubDate>Sun, 04 Sep 2022 09:17:32 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/dynamic-proxy-with-spring/</guid>
      <description>디자인 패턴 글 중 프록시 패턴과 데코레이터 패턴에서 프록시를 코드로 구현하는 방법을 알아보았다. (이전 글 참고) 그런데 프록시를 적용해야 할 클래스가 수십 개에서 수백 개가 되면 어떻게 될까? 이러한 프록시 클래스를 그 개수만큼 반복해서 만들어주어야 한다.
이러한 불편함을 해소하기 위해 나온 기술이 동적 프록시(Dynamic Proxy)이다. 동적 프록시는 말그대로 동적인 시점(런타임 시점)에 프록시를 자동으로 만들어서 적용해주는 기술이다.
자바에서 대표적인 동적 프록시 기술은 JDK 동적 프록시와 CGLIB(Code Generator LIBrary)이 있다. 두 기술 모두 동적 프록시를 만들어주지만, 차이점은 다음과 같다.</description>
    </item>
    
    <item>
      <title>[디자인 패턴] 프록시 패턴/데코레이터 패턴</title>
      <link>https://parker1609.github.io/post/design-pattern-proxy-pattern-and-decorator-pattern/</link>
      <pubDate>Thu, 25 Aug 2022 09:12:33 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/design-pattern-proxy-pattern-and-decorator-pattern/</guid>
      <description>이 글은 디자인 패턴에서 유사한 패턴인 프록시 패턴과 데코레이터 패턴에 대해 알아본다. 두 패턴은 사실 ‘프록시(proxy)’를 사용하는 패턴이다. 프록시의 뜻은 ‘대리자&amp;rsquo;라는 뜻인데, 뜻처럼 어떤 일을 대신 해주는 역할을 한다.
프록시는 소프트웨어 환경에서 다양한 곳에서 활용되는 용어인데, 근본적인 기능은 크게 2 가지로 나뉜다.
접근 제어 권한에 따른 접근 차단 캐싱 (캐싱되어 있는 값은 접근할 필요가 없으므로, 캐시는 접근 제어의 역할) 지연 로딩 부가 기능 추가 값 변경 로깅 필터링 … 프록시 패턴과 데코레이터 패턴은 둘 다 프록시 개념을 사용하지만, 의도에 따라 나뉜다.</description>
    </item>
    
    <item>
      <title>[디자인 패턴] 템플릿 메서드 패턴/전략 패턴/템플릿 콜백 패턴</title>
      <link>https://parker1609.github.io/post/design-pattern-template-method-pattern-and-strategy-pattern-andt-template-callback-pattern/</link>
      <pubDate>Fri, 19 Aug 2022 10:47:30 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/design-pattern-template-method-pattern-and-strategy-pattern-andt-template-callback-pattern/</guid>
      <description>이 글은 GOF 중에서 의도가 거의 유사하지만, 구현 방식이 조금씩 다른 3 가지 패턴을 알아본다. 템플릿 메서드 패턴, 전략 패턴, 템플릿 콜백 패턴이다. 이 3가지 패턴은 변경이 자주 발생하는 코드와 그렇지 않은 코드를 분리하는 것이 핵심이다. 여기에 객체지향의 다형성(또는 상속)을 이용하여 변경이 자주 발생하는 코드를 유연하게 대처하도록 한다.
패턴을 설명하기 위해 한 가지 예제를 바탕으로 각각의 패턴이 어떻게 구현되는지 살펴보자.
전체 예제 코드는 이 링크에서 볼 수 있습니다.
예제 - 문자 알림 전송 기능 개발자 파커는 애플리케이션에 문자 알림을 전송하는 기능을 추가하는 작업을 맡게 되었다.</description>
    </item>
    
    <item>
      <title>[개발자가 알아야 할 네트워크 기초] IP 주소, Port 번호</title>
      <link>https://parker1609.github.io/post/network-basic-ip-address-and-port-number/</link>
      <pubDate>Wed, 27 Jul 2022 09:59:18 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/network-basic-ip-address-and-port-number/</guid>
      <description>IP 주소 IP(Internet Protocol) 주소: Host에 대한 식별자 IPv4 VS IPv6 주소 길이 IPv4: 32bit IPv6: 128bit 2022년 기준, IPv4를 대부분 사용함. IPv4의 전체 경우의 수는 2^32 (대략 42억)이며, 전체 Host를 모두 나타낼 수는 없으므로 IPv6 체계가 나왔다. IP 주소 = Network ID + Host ID Network ID를 계산하기 위해 서브넷 마스크(넷 마스크)가 존재한다. Host ID 길이는 전체 길이 32bit에서 NetworkID를 제외한 길이이다. 예제) IPv4: 172.20.10.2, 서브넷 마스크: 255.255.255.0 Network ID = 172.</description>
    </item>
    
    <item>
      <title>[개발자가 알아야 할 네트워크 기초] TCP/IP 개요</title>
      <link>https://parker1609.github.io/post/network-basic-tcp-and-ip/</link>
      <pubDate>Wed, 27 Jul 2022 09:03:05 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/network-basic-tcp-and-ip/</guid>
      <description>OSI 7 계층을 처음부터 공부하는 것은 추천하지 않는다. 웹 개발자라면, TCP/IP, HTTP 부터 정확히 파악하는게 중요하다.
TCP/IP 모델은 OSI 7 계층 또는 DoD 모델의 구현체이다. 구체적인 순서: TCP/IP Model(가장 구체적) &amp;gt; Dod Model &amp;gt; OSI 7 Layers 프로세스는 TCP의 데이터를 소켓 형태로 접근할 수 있다. 여기서, 소켓은 User Application와 TCP가 서로 접근할 수 있도록 파일 형태로 추상화한 것이다. 식별자 Access Layer: MAC 주소(L2) → NIC(LAN 카드)에 대한 식별자 NIC이 2개가 있는 경우(일반적으로 유선, 무선 랜 카드), MAC 주소도 2개가 된다.</description>
    </item>
    
    <item>
      <title>[Spring Boot &#43; JPA &#43; PostgreSQL] 다양한 기본키(PK) 생성 방식과 주의사항</title>
      <link>https://parker1609.github.io/post/spring-boot-and-jpa-and-postgresql-generating-primary-key/</link>
      <pubDate>Wed, 01 Jun 2022 10:06:13 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/spring-boot-and-jpa-and-postgresql-generating-primary-key/</guid>
      <description>해당 글의 예제 코드는 이 링크를 참조해주세요.
JPA에서 엔티티의 PK 생성 방법은 여러가지가 존재합니다. JPA에서 제공해주는 방식과 이를 PostgreSQL에서 사용했을 때, 어떻게 동작하는지 그리고 어떤 주의할 사항이 있는지 살펴보겠습니다.
1. @GeneratedValue 사용하지 않는 경우 @GeneratedValue 어노테이션을 사용하지 않는 경우, 반드시 엔티티를 생성할 때, 직접 id 값을 지정해주어야 한다. 그렇지 않은 경우, 아래와 같은 에러가 발생한다.
ids for this class must be manually assigned before calling save() 엔티티를 저장하는 save() 메서드 호출 전에 id값이 명시되어 있어야 한다는 오류이다.</description>
    </item>
    
    <item>
      <title>자주 사용하는 git 명령어 모음</title>
      <link>https://parker1609.github.io/post/cheat-sheet-git-commands/</link>
      <pubDate>Sun, 27 Jun 2021 10:14:10 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/cheat-sheet-git-commands/</guid>
      <description>Git 쓰면서 겪었던 상황과 이를 해결한 명령어 모음입니다.
Git Command Help 터미널 환경에서 GIT을 사용할 경우 명령어로 쉽게 git command 정보를 알 수 있다. 바로 --help 옵션을 사용하는 것이다.
Git add 명령어 정보 보기
git add --help Git checkout 명령어 정보 보기
git checkout --help Git Branch Local Branch 이름 변경하기 git branch -m &amp;lt;변경 전 branch name&amp;gt; &amp;lt;변경 후 branch name&amp;gt; Local Branch 삭제하기 git branch -D &amp;lt;local branch name&amp;gt; Remote Branch 참고하기 Remote branch를 수정하지 않고 단지 읽고만 싶은 경우</description>
    </item>
    
    <item>
      <title>[IntelliJ IDEA] 유용한 플러그인 모음</title>
      <link>https://parker1609.github.io/post/intellij-idea-useful-plugin/</link>
      <pubDate>Sat, 26 Jun 2021 10:41:49 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/intellij-idea-useful-plugin/</guid>
      <description> 참고로, 최신 인텔리제이를 다운로드 받아보면 예전에는 직접 다운로드 받아야했던 플러그인들이 기본적으로 포함되어 있는 경우도 있었다.
IdeaVim 플러그인 홈페이지 Vim 환경을 인텔리제이에서 사용하고 싶을 때 사용하기 Rainbow Brackets 플러그인 홈페이지 코드 특성상 괄호의 종류와 중첩을 매우 자주 볼 수 있다. 이를 색깔로 편하게 구분할 수 있도록 도와준다. One Dark Theme 플러그인 홈페이지 Material Theme UI와 One Dark Theme 두 테마가 가장 인기가 좋은 듯 하다. CodeGlance 플러그인 홈페이지 코드의 전체 모습을 미리볼 수 있는 플러그인 Nyan Progress Bar 플러그인 홈페이지 밋밋한 진행바(progress bar)를 귀여운 고양이로 만들어주는 힐링 플러그인 오로지 귀여운 고양이를 보기 위한 플러그인&amp;hellip; </description>
    </item>
    
    <item>
      <title>Call by Value vs Call by Reference</title>
      <link>https://parker1609.github.io/post/call-by-value-vs-call-by-reference/</link>
      <pubDate>Wed, 04 Mar 2020 13:40:05 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/call-by-value-vs-call-by-reference/</guid>
      <description>C++과 Java를 공부하면서 헷갈렸던 것 중 하나가 call by value와 call by reference입니다. 흔히 Java가 call by reference가 가능한지에 대해 의견이 분분한 것을 보았습니다. 저도 이부분이 헷갈리기 시작하여 두 언어의 차이점에 대해 생각하며 결론을 내보았습니다. 이는 주관적인 생각이 포함되어 있으므로 의견이 다르거나 틀린 점이 있다면 지적 부탁드립니다!
먼저 결론부터 말씀드리면, Java는 call by reference를 할 수 없다고 생각합니다. 이에 대한 근거는 call by value부터 차근차근 살펴보면서 말씀드리겠습니다.
Call By Value Call by value는 원본 값을 그대로 복사하여 매개변수로 전달하는 것입니다.</description>
    </item>
    
  </channel>
</rss>
