<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Proxy on Parker Blog</title>
    <link>https://parker1609.github.io/tags/proxy/</link>
    <description>Recent content in Proxy on Parker Blog</description>
    <image>
      <title>Parker Blog</title>
      <url>https://parker1609.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://parker1609.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 04 Sep 2022 09:17:32 +0900</lastBuildDate><atom:link href="https://parker1609.github.io/tags/proxy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>동적 프록시(Dynamic Proxy) with Spring Framework</title>
      <link>https://parker1609.github.io/post/dynamic-proxy-with-spring/</link>
      <pubDate>Sun, 04 Sep 2022 09:17:32 +0900</pubDate>
      
      <guid>https://parker1609.github.io/post/dynamic-proxy-with-spring/</guid>
      <description>디자인 패턴 글 중 프록시 패턴과 데코레이터 패턴에서 프록시를 코드로 구현하는 방법을 알아보았다. (이전 글 참고) 그런데 프록시를 적용해야 할 클래스가 수십 개에서 수백 개가 되면 어떻게 될까? 이러한 프록시 클래스를 그 개수만큼 반복해서 만들어주어야 한다.
이러한 불편함을 해소하기 위해 나온 기술이 동적 프록시(Dynamic Proxy)이다. 동적 프록시는 말그대로 동적인 시점(런타임 시점)에 프록시를 자동으로 만들어서 적용해주는 기술이다.
자바에서 대표적인 동적 프록시 기술은 JDK 동적 프록시와 CGLIB(Code Generator LIBrary)이 있다. 두 기술 모두 동적 프록시를 만들어주지만, 차이점은 다음과 같다.</description>
    </item>
    
  </channel>
</rss>
